/*
 * AdMob Service - Test ve Production reklamlarƒ± y√∂netimi
 * 
 * KULLANIM:
 * 1. Test yaparken: _useTestAds = true
 * 2. Production'a ge√ßerken: _useTestAds = false (≈ûU ANDA AKTƒ∞F)
 * 
 * ‚ö†Ô∏è PRODUCTION MOD AKTƒ∞F:
 * - Ger√ßek reklamlar g√∂sterilir
 * - Rate limiting aktif (3 saniye minimum interval)
 * - AdMob politikalarƒ±na uygun olmalƒ±dƒ±r
 * - Test cihazlarƒ± tanƒ±mlanmamƒ±≈ü
 * 
 * Test ID'leri her zaman √ßalƒ±≈üƒ±r, production ID'leri onaylanmalƒ±dƒ±r.
 */
import 'dart:io';
import 'dart:async';
import 'package:flutter/widgets.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import '../utils/logger.dart';

class AdMobService {
  static final AdMobService _instance = AdMobService._internal();
  factory AdMobService() => _instance;
  AdMobService._internal();

  // App IDs (bilgi ama√ßlƒ±)
  static const String _androidAppId =
      'ca-app-pub-3600325889588673~2182319863'; // Prod (AndroidManifest.xml'de de tanƒ±mlƒ±)
  static const String _iosAppId =
      'ca-app-pub-3600325889588673~5340558560'; // Prod (Info.plist'den kullanƒ±lƒ±yor)

  // Test Ad Unit IDs (geli≈ütirme ve test i√ßin)
  static const String _androidNativeAdUnitIdTest =
      'ca-app-pub-3940256099942544/2247696110'; // Google test native ID
  static const String _iosNativeAdUnitIdTest =
      'ca-app-pub-3940256099942544/3986624511'; // Google test native ID

  static const String _androidBannerAdUnitIdTest =
      'ca-app-pub-3940256099942544/6300978111'; // Google test banner ID
  static const String _iosBannerAdUnitIdTest =
      'ca-app-pub-3940256099942544/2934735716'; // Google test banner ID

  // Production Ad Unit IDs
  static const String _androidNativeAdUnitIdProd =
      'ca-app-pub-3600325889588673/5822213790'; // Ger√ßek Android prod ID
  static const String _iosNativeAdUnitIdProd =
      'ca-app-pub-3600325889588673/1202018911';

  static const String _androidBannerAdUnitIdProd =
      'ca-app-pub-3600325889588673/7805712447';
  static const String _iosBannerAdUnitIdProd =
      'ca-app-pub-3600325889588673/3365147820'; // iOS production banner ID

  // Rewarded Ad Unit IDs (√ñd√ºll√º Reklam)
  static const String _androidRewardedAdUnitIdTest =
      'ca-app-pub-3940256099942544/5224354917'; // Google test rewarded ID
  static const String _iosRewardedAdUnitIdTest =
      'ca-app-pub-3940256099942544/1712485313'; // Google test rewarded ID

  static const String _androidRewardedAdUnitIdProd =
      'ca-app-pub-3600325889588673/4220640906'; // Ger√ßek Android prod rewarded ID
  static const String _iosRewardedAdUnitIdProd =
      'ca-app-pub-3600325889588673/1633441360'; // iOS production rewarded ID

  // Debug/Test modu kontrol√º
  static const bool _useTestAds = false; // PRODUCTION: Ger√ßek reklamlarƒ± kullan

  bool _isInitialized = false;

  // Native Ad deƒüi≈ükenleri
  NativeAd? _nativeAd;
  bool _isAdLoaded = false;
  bool _hasFailed = false;
  bool _isLoading = false;
  Timer? _retryTimer;
  int _retryCount = 0;
  static const int _maxRetries = 5; // iOS i√ßin daha fazla deneme
  static const Duration _retryDelay = Duration(seconds: 10); // iOS i√ßin daha uzun bekleme

  // Rewarded Ad deƒüi≈ükenleri
  RewardedAd? _rewardedAd;
  bool _isRewardedAdLoaded = false;
  bool _isRewardedAdLoading = false;
  bool _rewardedAdFailed = false;
  int _rewardedAdRetryCount = 0;

  // Production mode rate limiting
  DateTime? _lastAdRequest;
  static const Duration _minRequestInterval = Duration(
    seconds: 3,
  ); // Production'da minimum 3 saniye bekle

  // Thread g√ºvenliƒüi i√ßin mutex
  final Completer<void> _initCompleter = Completer<void>();
  bool _isInitializing = false;

  /// AdMob'u ba≈ülat
  Future<void> initialize() async {
    if (_isInitialized) {
      Logger.debug('‚ÑπÔ∏è AdMobService - AdMob zaten ba≈ülatƒ±lmƒ±≈ü');
      return;
    }

    if (_isInitializing) {
      Logger.debug('üîÑ AdMobService - AdMob zaten ba≈ülatƒ±lƒ±yor, bekle...');
      await _initCompleter.future;
      return;
    }

    _isInitializing = true;

    try {
      Logger.info('üöÄ AdMobService - AdMob ba≈ülatƒ±lƒ±yor...');
      Logger.info('üì± AdMobService - Platform: ${Platform.isIOS ? "iOS" : "Android"}');
      Logger.info('üîß AdMobService - Test Modu: ${_useTestAds ? "Aktif" : "Pasif"}');

      // WidgetsFlutterBinding'in hazƒ±r olduƒüundan emin ol
      if (!WidgetsBinding.instance.isRootWidgetAttached) {
        Logger.warning(
          '‚ö†Ô∏è AdMobService - WidgetsBinding hen√ºz hazƒ±r deƒüil, bekleniyor...',
        );
        await Future.delayed(const Duration(milliseconds: 1000));
      }

      // Flutter binding'in tamamen hazƒ±r olduƒüundan emin ol
      WidgetsFlutterBinding.ensureInitialized();

      // AdMob'u doƒürudan ba≈ülat
      await MobileAds.instance.initialize();

      // Production modda daha detaylƒ± request configuration
      RequestConfiguration requestConfig;

      if (_useTestAds) {
        // Test modda basit config
        requestConfig = RequestConfiguration(
          tagForChildDirectedTreatment: TagForChildDirectedTreatment.no,
          tagForUnderAgeOfConsent: TagForUnderAgeOfConsent.no,
          maxAdContentRating: MaxAdContentRating.pg,
        );
      } else {
        // Production modda geli≈ümi≈ü config
        requestConfig = RequestConfiguration(
          tagForChildDirectedTreatment: TagForChildDirectedTreatment.no,
          tagForUnderAgeOfConsent: TagForUnderAgeOfConsent.no,
          maxAdContentRating: MaxAdContentRating.pg,
          // Production i√ßin ek ayarlar
          testDeviceIds: [], // Bo≈ü liste - production i√ßin test cihazƒ± yok
        );
      }

      await MobileAds.instance.updateRequestConfiguration(requestConfig);

      _isInitialized = true;
      _initCompleter.complete();
      Logger.info('‚úÖ AdMobService - AdMob ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
      
      // Platform bilgilerini logla
      if (Platform.isIOS) {
        Logger.info('üçé AdMobService - iOS i√ßin optimize edilmi≈ü konfig√ºrasyon aktif');
        Logger.info('üì± AdMobService - iOS App ID: $_iosAppId');
      } else if (Platform.isAndroid) {
        Logger.info('ü§ñ AdMobService - Android i√ßin optimize edilmi≈ü konfig√ºrasyon aktif');
        Logger.info('üì± AdMobService - Android App ID: $_androidAppId');
      }
    } catch (e) {
      Logger.error('‚ùå AdMobService - AdMob ba≈ülatƒ±lƒ±rken hata: $e');
      _isInitialized = false;
      _initCompleter.completeError(e);
    } finally {
      _isInitializing = false;
    }
  }

  /// Uygulama ID'sini al
  String get appId {
    if (Platform.isAndroid) {
      return _androidAppId;
    } else if (Platform.isIOS) {
      return _iosAppId;
    }
    return _androidAppId; // Default
  }

  /// Native Ad Unit ID'sini al (Test/Production se√ßimi ile)
  String get nativeAdUnitId {
    if (_useTestAds) {
      // Test reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidNativeAdUnitIdTest;
        Logger.info('üì° AdMobService - Android TEST NativeAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosNativeAdUnitIdTest;
        Logger.info('üì° AdMobService - iOS TEST NativeAdUnitId: $id');
        return id;
      }
      return _androidNativeAdUnitIdTest; // Default test
    } else {
      // Production reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidNativeAdUnitIdProd;
        Logger.info('üì° AdMobService - Android PROD NativeAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosNativeAdUnitIdProd;
        Logger.info('üì° AdMobService - iOS PROD NativeAdUnitId: $id');
        return id;
      }
      return _androidNativeAdUnitIdProd; // Default prod
    }
  }

  /// Banner Ad Unit ID'sini al (Test/Production se√ßimi ile)
  String get bannerAdUnitId {
    if (_useTestAds) {
      // Test reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidBannerAdUnitIdTest;
        Logger.info('üì° AdMobService - Android TEST BannerAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosBannerAdUnitIdTest;
        Logger.info('üì° AdMobService - iOS TEST BannerAdUnitId: $id');
        return id;
      }
      return _androidBannerAdUnitIdTest; // Default test
    } else {
      // Production reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidBannerAdUnitIdProd;
        Logger.info('üì° AdMobService - Android PROD BannerAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosBannerAdUnitIdProd;
        Logger.info('üì° AdMobService - iOS PROD BannerAdUnitId: $id');
        return id;
      }
      return _androidBannerAdUnitIdProd; // Default prod
    }
  }

  /// Rewarded Ad Unit ID'sini al (Test/Production se√ßimi ile)
  String get rewardedAdUnitId {
    if (_useTestAds) {
      // Test reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidRewardedAdUnitIdTest;
        Logger.info('üì° AdMobService - Android TEST RewardedAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosRewardedAdUnitIdTest;
        Logger.info('üì° AdMobService - iOS TEST RewardedAdUnitId: $id');
        return id;
      }
      return _androidRewardedAdUnitIdTest; // Default test
    } else {
      // Production reklamlarƒ± kullan
      if (Platform.isAndroid) {
        final id = _androidRewardedAdUnitIdProd;
        Logger.info('üì° AdMobService - Android PROD RewardedAdUnitId: $id');
        return id;
      } else if (Platform.isIOS) {
        final id = _iosRewardedAdUnitIdProd;
        Logger.info('üì° AdMobService - iOS PROD RewardedAdUnitId: $id');
        return id;
      }
      return _androidRewardedAdUnitIdProd; // Default prod
    }
  }

  /// Native reklam y√ºkle (performans optimizasyonlu)
  Future<void> loadNativeAd() async {
    if (!_isInitialized) {
      Logger.info('üîÑ AdMobService - AdMob ba≈ülatƒ±lmamƒ±≈ü, ba≈ülatƒ±lƒ±yor...');
      await initialize();
    }

    // Production modda rate limiting kontrol√º
    if (!_useTestAds && _lastAdRequest != null) {
      final timeSinceLastRequest = DateTime.now().difference(_lastAdRequest!);
      if (timeSinceLastRequest < _minRequestInterval) {
        final waitTime = _minRequestInterval - timeSinceLastRequest;
        Logger.info(
          '‚è±Ô∏è AdMobService - Production rate limiting: ${waitTime.inSeconds}s bekleniyor...',
        );
        await Future.delayed(waitTime);
      }
    }

    // Eƒüer zaten y√ºkleniyorsa, bekle
    if (_isLoading) {
      Logger.debug('üîÑ AdMobService - Reklam zaten y√ºkleniyor, bekle...');
      return;
    }

    // Eƒüer daha √∂nce hata aldƒ±ysak ve maksimum deneme sayƒ±sƒ±na ula≈ütƒ±ysak, tekrar deneme
    if (_hasFailed && _retryCount >= _maxRetries) {
      Logger.warning(
        '‚ö†Ô∏è AdMobService - Maksimum deneme sayƒ±sƒ±na ula≈üƒ±ldƒ±, reklam y√ºklenmeyecek',
      );
      return;
    }

    // Eƒüer reklam zaten y√ºkl√ºyse ve ge√ßerliyse, yeni reklam y√ºkleme
    if (_isAdLoaded && _nativeAd != null && _isAdValid()) {
      Logger.debug('‚ÑπÔ∏è AdMobService - Reklam zaten y√ºkl√º ve ge√ßerli');
      return;
    }

    // Request zamanƒ±nƒ± kaydet
    _lastAdRequest = DateTime.now();

    _isLoading = true;
    _retryCount++;

    try {
      Logger.info(
        'üöÄ AdMobService - Native reklam y√ºkleniyor... (Deneme: $_retryCount)',
      );

      // Reklam y√ºkleme i≈ülemini arka planda yap
      await _loadAdInBackground();
    } catch (e) {
      Logger.error('‚ùå AdMobService - Native reklam y√ºklenirken hata: $e');
      _handleLoadError();
    } finally {
      _isLoading = false;
    }
  }

  // Reklamƒ±n ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol et
  bool _isAdValid() {
    try {
      if (_nativeAd == null) return false;

      // Reklamƒ±n durumunu kontrol et - daha detaylƒ± kontrol
      if (!_isAdLoaded) return false;

      return true;
    } catch (e) {
      Logger.error('‚ùå AdMobService - Reklam gecerlilik kontrolu hatasi: $e');
      return false;
    }
  }

  // Arka planda reklam y√ºkleme
  Future<void> _loadAdInBackground() async {
    try {
      // Eƒüer eski reklam varsa temizle
      if (_nativeAd != null) {
        await _disposeCurrentAd();
      }

      // Production'da √∂zel request configuration
      AdRequest adRequest;

      if (_useTestAds) {
        // Test modda standart request
        adRequest = const AdRequest();
      } else {
        // Production modda optimize edilmi≈ü request
        adRequest = const AdRequest(
          // Production i√ßin ekstra metadata
          keywords: [
            'takasly',
            'takas',
            'ilan',
            '√ºr√ºn',
          ], // Uygulama ile ilgili keywords
          nonPersonalizedAds: false, // Personalize edilmi≈ü reklamlar
        );
      }

      // Reklam olu≈ütur
      _nativeAd = NativeAd(
        adUnitId: nativeAdUnitId,
        factoryId: 'listTile',
        request: adRequest,
        listener: NativeAdListener(
          onAdLoaded: (ad) {
            Logger.info('‚úÖ AdMobService - Native reklam basariyla yuklendi');
            _isAdLoaded = true;
            _hasFailed = false;
            _retryCount = 0; // Ba≈üarƒ±lƒ± y√ºklemede sayacƒ± sƒ±fƒ±rla
          },
          onAdFailedToLoad: (ad, error) {
            Logger.error(
              '‚ùå AdMobService - Native reklam yuklenemedi: ${error.message}',
            );
            Logger.error('‚ùå AdMobService - Error code: ${error.code}');
            Logger.error('‚ùå AdMobService - Error domain: ${error.domain}');
            
            // iOS i√ßin √∂zel hata y√∂netimi
            if (Platform.isIOS) {
              Logger.error('üçé AdMobService - iOS √∂zel hata detaylarƒ±:');
              Logger.error('üçé AdMobService - Error description: ${error.message}');
              Logger.error('üçé AdMobService - Error code: ${error.code}');
            }
            
            _handleLoadError();
            _safeDisposeAd(ad as NativeAd);
          },
          onAdClicked: (ad) {
            Logger.info('üëÜ AdMobService - Native reklam tiklandi');
          },
          onAdImpression: (ad) {
            Logger.info('üëÅÔ∏è AdMobService - Native reklam gosterildi');
          },
          onAdOpened: (ad) {
            Logger.info('üö™ AdMobService - Native reklam acildi');
          },
          onAdClosed: (ad) {
            Logger.info('üö™ AdMobService - Native reklam kapandi');
          },
        ),
      );

      // Reklam y√ºkleme i≈ülemini UI thread'i bloklamayacak ≈üekilde yap
      await _nativeAd!.load().timeout(
        const Duration(seconds: 15), // iOS i√ßin daha uzun timeout
        onTimeout: () {
          throw TimeoutException('Reklam yukleme zaman asimi');
        },
      );
    } catch (e) {
      Logger.error('‚ùå AdMobService - Arka plan reklam yukleme hatasi: $e');
      // Hata durumunda reklamƒ± temizle
      await _disposeCurrentAd();
      rethrow;
    }
  }

  // G√ºvenli reklam dispose etme
  void _safeDisposeAd(NativeAd ad) {
    try {
      ad.dispose();
    } catch (e) {
      Logger.error('‚ùå AdMobService - G√ºvenli reklam dispose hatasƒ±: $e');
    }
  }

  // Hata durumunu i≈üle
  void _handleLoadError() {
    _isAdLoaded = false;
    _hasFailed = true;

    // Hata durumunda reklamƒ± temizle
    _disposeCurrentAd();

    // Eƒüer maksimum deneme sayƒ±sƒ±na ula≈ümadƒ±ysak, tekrar dene
    if (_retryCount < _maxRetries) {
      Logger.info('üîÑ AdMobService - $_retryDelay sonra tekrar denenecek...');
      _retryTimer?.cancel();
      _retryTimer = Timer(_retryDelay, () {
        if (!_isLoading) {
          loadNativeAd();
        }
      });
    }
  }

  // Mevcut reklamƒ± temizle
  Future<void> _disposeCurrentAd() async {
    if (_nativeAd != null) {
      Logger.debug('üßπ AdMobService - Eski reklam temizleniyor...');
      try {
        _nativeAd!.dispose();
      } catch (e) {
        Logger.error('‚ùå AdMobService - Reklam temizleme hatasƒ±: $e');
      }
      _nativeAd = null;
      _isAdLoaded = false;
    }
  }

  /// Native reklamƒ±n y√ºklenip y√ºklenmediƒüini kontrol et
  bool get isAdLoaded {
    try {
      // Eƒüer nativeAd objesi varsa ama _isAdLoaded false ise, true d√∂nd√ºr
      if (_nativeAd != null && !_isAdLoaded && _isAdValid()) {
        Logger.warning(
          '‚ö†Ô∏è AdMobService - nativeAd mevcut ama _isAdLoaded false, duzeltiliyor...',
        );
        _isAdLoaded = true;
      }
      return _isAdLoaded && _isAdValid();
    } catch (e) {
      Logger.error('‚ùå AdMobService - isAdLoaded getter hatasi: $e');
      return false;
    }
  }

  /// Native reklamƒ± al (g√ºvenli)
  NativeAd? get nativeAd {
    try {
      if (_nativeAd != null && _isAdValid()) {
        return _nativeAd;
      }
      return null;
    } catch (e) {
      Logger.error('‚ùå AdMobService - nativeAd getter hatasƒ±: $e');
      return null;
    }
  }

  /// √ñd√ºll√º reklam y√ºkle
  Future<void> loadRewardedAd() async {
    if (!_isInitialized) {
      Logger.info('üîÑ AdMobService - AdMob ba≈ülatƒ±lmamƒ±≈ü, ba≈ülatƒ±lƒ±yor...');
      await initialize();
    }

    // Eƒüer zaten y√ºkleniyorsa veya y√ºkl√ºyse, bekle
    if (_isRewardedAdLoading) {
      Logger.debug('üîÑ AdMobService - √ñd√ºll√º reklam zaten y√ºkleniyor...');
      return;
    }

    if (_isRewardedAdLoaded && _rewardedAd != null) {
      Logger.debug('‚ÑπÔ∏è AdMobService - √ñd√ºll√º reklam zaten y√ºkl√º');
      return;
    }

    // Maksimum deneme sayƒ±sƒ±na ula≈ütƒ±ysak, √ßƒ±k
    if (_rewardedAdFailed && _rewardedAdRetryCount >= _maxRetries) {
      Logger.warning(
        '‚ö†Ô∏è AdMobService - √ñd√ºll√º reklam maksimum deneme sayƒ±sƒ±na ula≈ütƒ±',
      );
      return;
    }

    _isRewardedAdLoading = true;
    _rewardedAdRetryCount++;

    try {
      Logger.info(
        'üéÅ AdMobService - √ñd√ºll√º reklam y√ºkleniyor... (Deneme: $_rewardedAdRetryCount)',
      );

      // Eski reklamƒ± temizle
      if (_rewardedAd != null) {
        _rewardedAd!.dispose();
        _rewardedAd = null;
        _isRewardedAdLoaded = false;
      }

      // AdRequest olu≈ütur
      AdRequest adRequest;
      if (_useTestAds) {
        adRequest = const AdRequest();
      } else {
        adRequest = const AdRequest(
          keywords: ['takasly', 'takas', 'ilan', '√ºr√ºn'],
          nonPersonalizedAds: false,
        );
      }

      // √ñd√ºll√º reklam y√ºkle
      await RewardedAd.load(
        adUnitId: rewardedAdUnitId,
        request: adRequest,
        rewardedAdLoadCallback: RewardedAdLoadCallback(
          onAdLoaded: (RewardedAd ad) {
            Logger.info('‚úÖ AdMobService - √ñd√ºll√º reklam ba≈üarƒ±yla y√ºklendi');
            _rewardedAd = ad;
            _isRewardedAdLoaded = true;
            _rewardedAdFailed = false;
            _rewardedAdRetryCount = 0;
            _isRewardedAdLoading = false;
          },
          onAdFailedToLoad: (LoadAdError error) {
            Logger.error(
              '‚ùå AdMobService - √ñd√ºll√º reklam y√ºklenemedi: ${error.message}',
            );
            Logger.error('‚ùå AdMobService - Error code: ${error.code}');
            Logger.error('‚ùå AdMobService - Error domain: ${error.domain}');
            
            // iOS i√ßin √∂zel hata y√∂netimi
            if (Platform.isIOS) {
              Logger.error('üçé AdMobService - iOS √∂d√ºll√º reklam hata detaylarƒ±:');
              Logger.error('üçé AdMobService - Error description: ${error.message}');
              Logger.error('üçé AdMobService - Error code: ${error.code}');
              Logger.error('üçé AdMobService - Ad Unit ID: $rewardedAdUnitId');
            }
            
            _rewardedAdFailed = true;
            _isRewardedAdLoaded = false;
            _isRewardedAdLoading = false;

            // Retry logic
            if (_rewardedAdRetryCount < _maxRetries) {
              Logger.info(
                'üîÑ AdMobService - $_retryDelay sonra √∂d√ºll√º reklam tekrar denenecek...',
              );
              Timer(_retryDelay, () => loadRewardedAd());
            }
          },
        ),
      );
    } catch (e) {
      Logger.error('‚ùå AdMobService - √ñd√ºll√º reklam y√ºkleme hatasƒ±: $e');
      _rewardedAdFailed = true;
      _isRewardedAdLoaded = false;
      _isRewardedAdLoading = false;
    }
  }

  /// √ñd√ºll√º reklamƒ± g√∂ster
  Future<bool> showRewardedAd() async {
    if (!_isRewardedAdLoaded || _rewardedAd == null) {
      Logger.warning('‚ö†Ô∏è AdMobService - √ñd√ºll√º reklam y√ºkl√º deƒüil');
      return false;
    }

    bool rewardEarned = false;
    final completer = Completer<bool>();

    try {
      Logger.info('üéÅ AdMobService - √ñd√ºll√º reklam g√∂steriliyor...');

      _rewardedAd!.fullScreenContentCallback = FullScreenContentCallback(
        onAdShowedFullScreenContent: (RewardedAd ad) {
          Logger.info('üéÅ AdMobService - √ñd√ºll√º reklam tam ekran g√∂sterildi');
        },
        onAdDismissedFullScreenContent: (RewardedAd ad) {
          Logger.info('üéÅ AdMobService - √ñd√ºll√º reklam kapatƒ±ldƒ±');
          ad.dispose();
          _rewardedAd = null;
          _isRewardedAdLoaded = false;

          // Sonucu d√∂nd√ºr
          if (!completer.isCompleted) {
            completer.complete(rewardEarned);
          }

          // Yeni reklam y√ºkle (arka planda)
          Future.microtask(() => loadRewardedAd());
        },
        onAdFailedToShowFullScreenContent: (RewardedAd ad, AdError error) {
          Logger.error(
            '‚ùå AdMobService - √ñd√ºll√º reklam g√∂sterilemedi: ${error.message}',
          );
          ad.dispose();
          _rewardedAd = null;
          _isRewardedAdLoaded = false;

          if (!completer.isCompleted) {
            completer.complete(false);
          }
        },
      );

      await _rewardedAd!.show(
        onUserEarnedReward: (AdWithoutView ad, RewardItem reward) {
          Logger.info(
            'üéâ AdMobService - Kullanƒ±cƒ± √∂d√ºl kazandƒ±: ${reward.amount} ${reward.type}',
          );
          rewardEarned = true;
        },
      );
    } catch (e) {
      Logger.error('‚ùå AdMobService - √ñd√ºll√º reklam g√∂sterme hatasƒ±: $e');
      if (!completer.isCompleted) {
        completer.complete(false);
      }
    }

    return completer.future;
  }

  /// √ñd√ºll√º reklamƒ±n y√ºklenip y√ºklenmediƒüini kontrol et
  bool get isRewardedAdLoaded => _isRewardedAdLoaded && _rewardedAd != null;

  /// √ñd√ºll√º reklam y√ºklenme durumunu kontrol et
  bool get isRewardedAdLoading => _isRewardedAdLoading;

  /// Reklamƒ± temizle
  void dispose() {
    Logger.debug('üßπ AdMobService - Reklam temizleniyor...');
    _retryTimer?.cancel();
    _disposeCurrentAd();

    // √ñd√ºll√º reklamƒ± da temizle
    if (_rewardedAd != null) {
      _rewardedAd!.dispose();
      _rewardedAd = null;
      _isRewardedAdLoaded = false;
    }
  }

  /// Yeni reklam y√ºkle (mevcut reklamƒ± temizleyip)
  Future<void> reloadAd() async {
    Logger.info('üîÑ AdMobService - Reklam yeniden y√ºkleniyor...');
    _retryTimer?.cancel();
    _retryCount = 0;
    _hasFailed = false;
    await _disposeCurrentAd();
    await loadNativeAd();
  }

  /// Hata durumunu sƒ±fƒ±rla (yeniden deneme i√ßin)
  void resetFailedState() {
    Logger.info('üîÑ AdMobService - Hata durumu sƒ±fƒ±rlanƒ±yor...');
    _retryTimer?.cancel();
    _hasFailed = false;
    _retryCount = 0;
    _rewardedAdFailed = false;
    _rewardedAdRetryCount = 0;
  }

  /// Y√ºkleme durumunu kontrol et
  bool get isLoading => _isLoading;
}
