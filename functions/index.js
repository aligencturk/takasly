const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

// Chat bildirimi g√∂nder
exports.sendChatNotification = functions.https.onCall(async (data, context) => {
    try {
        console.log('=== CHAT NOTIFICATION START ===');
        console.log('Timestamp:', new Date().toISOString());

        // Kullanƒ±cƒ± kimlik doƒürulamasƒ± kontrol et (daha esnek)
        let currentUserId = 'unknown';
        if (context.auth) {
            currentUserId = context.auth.uid;
            console.log('‚úÖ Kimlik doƒürulanmƒ±≈ü kullanƒ±cƒ±:', currentUserId);
        } else {
            console.log('‚ö†Ô∏è Kullanƒ±cƒ± kimlik doƒürulanmamƒ±≈ü, devam ediliyor...');
        }

        const { recipientId, fcmToken, title, body, chatId, senderId, messageType, timestamp } = data;

        console.log('üì• Gelen veriler:', {
            recipientId,
            fcmTokenLength: fcmToken ? fcmToken.length : 0,
            title,
            body,
            chatId,
            senderId,
            messageType,
            timestamp
        });

        // FCM token detaylƒ± log
        console.log('üîç FCM TOKEN DETAYI:', {
            token: fcmToken,
            tokenType: typeof fcmToken,
            tokenLength: fcmToken ? fcmToken.length : 0,
            tokenStart: fcmToken ? fcmToken.substring(0, 20) : 'null',
            tokenEnd: fcmToken ? fcmToken.substring(fcmToken.length - 10) : 'null',
            isValidFormat: fcmToken && typeof fcmToken === 'string' && fcmToken.length >= 100
        });

        // Gerekli alanlarƒ± kontrol et
        if (!fcmToken || !title || !body || !chatId || !senderId) {
            console.error('‚ùå Eksik parametreler:', {
                recipientId,
                fcmToken: fcmToken ? 'mevcut' : 'eksik',
                title,
                body,
                chatId,
                senderId
            });
            throw new functions.https.HttpsError('invalid-argument', 'Eksik parametreler');
        }

        // FCM token formatƒ±nƒ± kontrol et
        if (typeof fcmToken !== 'string' || fcmToken.length < 100) {
            console.error('‚ùå Ge√ßersiz FCM token formatƒ±:', {
                type: typeof fcmToken,
                length: fcmToken ? fcmToken.length : 0,
                sample: fcmToken ? fcmToken.substring(0, 50) : 'null'
            });
            throw new functions.https.HttpsError('invalid-argument', 'Ge√ßersiz FCM token formatƒ±');
        }

        console.log('‚úÖ FCM token kontrol edildi, uzunluk:', fcmToken.length);
        console.log('üîç FCM token √∂rneƒüi:', fcmToken.substring(0, 50) + '...');

        // FCM mesajƒ± hazƒ±rla
        const message = {
            token: fcmToken,
            notification: {
                title: title,
                body: body,
            },
            data: {
                type: 'chat_message',
                chatId: chatId,
                senderId: senderId,
                messageType: messageType || 'text',
                timestamp: timestamp ? timestamp.toString() : Date.now().toString(),
            },
            android: {
                notification: {
                    channelId: 'chat_channel',
                    priority: 'high',
                    sound: 'notification_sound',
                    icon: '@drawable/ic_notification',
                    color: '#FF5722',
                    tag: `chat_${chatId}`,
                    // group alanƒ±nƒ± kaldƒ±r (Android'de desteklenmiyor)
                },
            },
            apns: {
                payload: {
                    aps: {
                        sound: 'notification_sound.aiff',
                        badge: 1,
                        category: 'chat_message',
                        'thread-id': chatId,
                    },
                },
            },
        };

        console.log('üì± FCM mesajƒ± hazƒ±rlandƒ±, g√∂nderiliyor...');
        console.log('üì§ FCM mesaj detaylarƒ±:', {
            token: fcmToken.substring(0, 20) + '...',
            title: message.notification.title,
            body: message.notification.body,
            data: message.data
        });

        // FCM ile bildirim g√∂nder
        const response = await admin.messaging().send(message);

        console.log('‚úÖ FCM yanƒ±tƒ±:', response);

        // Bildirim logunu kaydet
        try {
            await admin.database().ref(`notifications/${recipientId}`).push({
                type: 'chat_message',
                chatId: chatId,
                senderId: senderId,
                messageType: messageType || 'text',
                title: title,
                body: body,
                timestamp: timestamp || Date.now(),
                fcmResponse: response,
                createdAt: admin.database.ServerValue.TIMESTAMP,
            });
            console.log('‚úÖ Bildirim logu kaydedildi');
        } catch (dbError) {
            console.warn('‚ö†Ô∏è Bildirim logu kaydedilemedi:', dbError);
            // Ana i≈ülemi etkilemesin
        }

        console.log('üéâ Chat bildirimi ba≈üarƒ±yla g√∂nderildi:', response);
        console.log('=== CHAT NOTIFICATION SUCCESS ===');
        return { success: true, messageId: response };

    } catch (error) {
        console.error('=== CHAT NOTIFICATION ERROR ===');
        console.error('‚ùå Chat bildirimi hatasƒ±:', error);

        // Hata tipine g√∂re √∂zel mesajlar
        let errorMessage = 'Bildirim g√∂nderilemedi';

        if (error.code === 'messaging/invalid-registration-token') {
            errorMessage = 'FCM token ge√ßersiz';
        } else if (error.code === 'messaging/registration-token-not-registered') {
            errorMessage = 'FCM token kayƒ±tlƒ± deƒüil';
        } else if (error.code === 'messaging/quota-exceeded') {
            errorMessage = 'FCM kotasƒ± a≈üƒ±ldƒ±';
        } else if (error.code === 'messaging/server-unavailable') {
            errorMessage = 'FCM sunucu hatasƒ±';
        } else if (error.code === 'messaging/internal-error') {
            errorMessage = 'FCM i√ß hata';
        }

        console.error('üîç Hata detayƒ±:', {
            code: error.code,
            message: error.message,
            stack: error.stack
        });

        console.error('=== CHAT NOTIFICATION ERROR END ===');
        throw new functions.https.HttpsError('internal', errorMessage, error);
    }
});

// Kullanƒ±cƒ± √ßƒ±kƒ±≈ü yaptƒ±ƒüƒ±nda FCM token'ƒ± sil
exports.cleanupUserToken = functions.auth.user().onDelete(async (user) => {
    try {
        const uid = user.uid;

        // Kullanƒ±cƒ±nƒ±n FCM token'ƒ±nƒ± sil
        await admin.database().ref(`users/${uid}/fcmToken`).remove();

        // Kullanƒ±cƒ±nƒ±n bildirimlerini sil
        await admin.database().ref(`notifications/${uid}`).remove();

        console.log(`Kullanƒ±cƒ± ${uid} i√ßin temizlik tamamlandƒ±`);
    } catch (error) {
        console.error('Kullanƒ±cƒ± temizlik hatasƒ±:', error);
    }
});

// Chat silindiƒüinde ilgili bildirimleri temizle
exports.cleanupChatNotifications = functions.database
    .ref('/chats/{chatId}')
    .onDelete(async (snapshot, context) => {
        try {
            const chatId = context.params.chatId;

            // Bu chat'e ait t√ºm bildirimleri bul ve sil
            const notificationsRef = admin.database().ref('notifications');
            const snapshot = await notificationsRef.orderByChild('chatId').equalTo(chatId).once('value');

            if (snapshot.exists()) {
                const updates = {};
                snapshot.forEach((childSnapshot) => {
                    updates[`${childSnapshot.key}`] = null;
                });

                await notificationsRef.update(updates);
                console.log(`Chat ${chatId} i√ßin ${Object.keys(updates).length} bildirim silindi`);
            }
        } catch (error) {
            console.error('Chat bildirim temizlik hatasƒ±:', error);
        }
    });
